##SIMPLEMENTE
1.Ejecuta el service worker en segundo plano y como tiene el comportamiento por defecto de compartir el postMessage a todas las pestañas del navegador de manera local (EASY PEACE)
2.Manejar en envio y recepcion del mensaje y aplicar logica para identificar la pestaña que envia el mensaje y ponerlo de negro y si es mío mensaje que lo ponga de verde. (MEDIO COPLEX)
3.Aplicar estilos css ,tecnicas para dejarle un acabado parecido al de whatsapp
4.Como todo andaba de maravilla digo bueno agreguemos una funcionalidad para que esto no solo sea local sino que trabaje con las pestañas que envien del mismo origen asi que investigue y me tope con WebSocket pero estos trabajan en el backend asi que cree un backend servidor http y WebSocket
5.El desafío estaba en conectar los mensajes que se envian de todas las computadora en el mismo origen a mi computadora a mis pestañas son muchos hilos.
6.Websocket conecta a las computadoras y si hay un postMessage en el backedn se los envia a todas las computadoras y pestañas.
7.En el FrontEnd utilice SocketIO para manejar Los mensajes del servidor en el front.
8.Luego el desafío era implementarlo sin afectar a lo que ya tenía hecho de manera local, asi que utilice el postMessage del service worker para enviarle el mensaje a todas las pestañas, el socket io lo conecte al service worker
9.Proceso bastante complejo de asimilar de golpe pero DIVIDE Y GANARÁS.

##FRONTEND

Contexto:

Dónde: Este código se ejecuta en el Service Worker, que es un script que se ejecuta en segundo plano en el navegador.

Qué hace: Escucha mensajes enviados desde las pestañas que están controladas por el Service Worker. Cuando recibe un mensaje, lo envía al servidor WebSocket.

Flujo de Comunicación:
Origen del Mensaje: La pestaña del navegador envía un mensaje al Service Worker (por ejemplo, usando postMessage).
Propósito: Permitir que las pestañas se comuniquen con el servidor a través del WebSocket.




##BACKEND
Contexto:
Dónde: Este código se ejecuta en el servidor, específicamente en el entorno de Node.js.

Qué hace: Escucha mensajes que llegan a través de una conexión WebSocket de un cliente (que podría ser el Service Worker o cualquier otro cliente WebSocket).

Flujo de Comunicación:
Origen del Mensaje: El mensaje proviene de un cliente WebSocket conectado (que puede ser el Service Worker, o un navegador que se conecta directamente al WebSocket).

Propósito: Procesar el mensaje recibido y, posiblemente, reenviarlo a otros clientes conectados.

